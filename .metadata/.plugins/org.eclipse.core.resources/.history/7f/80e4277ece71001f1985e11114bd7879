grammar FrassonGrammar;

@header {
    import java.util.ArrayList;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.Stack;
    import io.compiler.types.Var;
    import io.compiler.types.VarType;
    import io.compiler.core.exceptions.SemanticException;
    import io.compiler.core.ast.Command;
    import io.compiler.core.ast.IfCommand;
    import io.compiler.core.ast.ReadCommand;
    import io.compiler.core.ast.WriteCommand;
}

@members {
    private ArrayList<Var> varList = new ArrayList<>();
    private Map<String, Var> symbolTable = new HashMap<>();
    private ArrayList<Var> currentDecl = new ArrayList<>();
    private int currentType;
    private int leftType = -1, rightType = -1;
    private String strExpr = "";
    private IfCommand currentIfCommand;
    private Stack<ArrayList<Command>> stack = new Stack<>();

    // Helper methods
    private double parseNumber(String text) {
        return Double.parseDouble(text);
    }

    private String parseString(String text) {
        return text.substring(1, text.length() - 1);
    }

    public void updateType(){
        for(Var v: currentDecl){
           v.setType(currentType);
           symbolTable.put(v.getName(), v);
        }
    }

    public boolean isDeclared(String id){
        return symbolTable.get(id) != null;
    }
}

prog
    : 'programa' declara bloco 'fimprog' EOF
      {
          // Final actions after parsing the program
          // For example, you can display the variables or check for semantic errors
      }
    ;

declara
    : 'declare' { currentDecl.clear(); } 
      ID { currentDecl.add(new Var($ID.text)); }
      (',' ID { currentDecl.add(new Var($ID.text)); } )*
      ':' tipo 
      {
          if ($tipo.text.equals("numero")) {
              currentType = Var.NUMBER;
          } else if ($tipo.text.equals("string")) {
              currentType = Var.TEXT;
          } else {
              throw new RuntimeException("Unknown variable type: " + $tipo.text);
          }
          updateType();
      } '.'
    ;

tipo
    : 'numero'
    | 'string'
    ;

bloco
    : (cmd '.')+
    ;

cmd
    : cmdLeitura
    | cmdEscrita
    | cmdExpr
    | cmdIf
    ;

cmdLeitura
    : 'leia' '(' ID ')'
      {
          Var var = symbolTable.get($ID.text);
          if (var == null) {
              System.err.println("Error: Undeclared variable " + $ID.text);
          } else {
              var.setInitialized(true);
              try {
                  System.out.print("Input for " + $ID.text + ": ");
                  java.util.Scanner scanner = new java.util.Scanner(System.in);
                  String input = scanner.nextLine();
                  if (var.getType() == Var.NUMBER) {
                      Double.parseDouble(input); // Validate number
                      var.setValue(input);
                  } else if (var.getType() == Var.TEXT) {
                      var.setValue(input);
                  }
              } catch (Exception e) {
                  System.err.println("Error reading input: " + e.getMessage());
              }
          }
      }
    ;

cmdEscrita
    : 'escreva' '(' (TEXT | ID) ')'
      {
          if ($TEXT != null) {
              String text = parseString($TEXT.text);
              System.out.println(text);
          } else if ($ID != null) {
              Var var = symbolTable.get($ID.text);
              if (var == null) {
                  System.err.println("Error: Undeclared variable " + $ID.text);
              } else {
                  System.out.println(var.getValue());
              }
          }
      }
    ;

cmdExpr
    : ID 
      {
          if (!isDeclared($ID.text)) {
              System.err.println("Error: Undeclared variable " + $ID.text);
          } else {
              symbolTable.get($ID.text).setInitialized(true);
              leftType = symbolTable.get($ID.text).getType();
          }
      }
      ':=' expr 
      {
          Var var = symbolTable.get($ID.text);
          Object value = $expr.val;
          rightType = $expr.type;

          if (leftType < rightType) {
              System.err.println("Error: Type mismatch in assignment to variable " + $ID.text);
          } else {
              if (leftType == Var.NUMBER) {
                  var.setValue(value.toString());
              } else if (leftType == Var.TEXT) {
                  var.setValue((String) value);
              }
          }
      } '.'
    ;

cmdIf
    : 'se' 
      {
          // Initialize variables for condition evaluation
          strExpr = "";
      }
      '(' expr 
      {
          Object left = $expr.val;
          int leftExprType = $expr.type;
      } 
      op_rel 
      {
          strExpr += $op_rel.text;
      } 
      expr 
      {
          Object right = $expr.val;
          int rightExprType = $expr.type;
      } 
      ')' 'entao' blocoIf 
      {
          boolean condition = false;
          String op = $op_rel.text;

          // Evaluate condition based on operator
          if (leftType == Var.NUMBER && rightType == Var.NUMBER) {
              double l = (Double) $expr(0).val;
              double r = (Double) $expr(1).val;
              switch (op) {
                  case "<": condition = l < r; break;
                  case ">": condition = l > r; break;
                  case "<=": condition = l <= r; break;
                  case ">=": condition = l >= r; break;
                  case "==": condition = l == r; break;
                  case "!=": condition = l != r; break;
                  default: System.err.println("Error: Unknown operator " + op);
              }
          } else {
              System.err.println("Error: Incompatible types in condition");
          }

          // Execute appropriate block
          if (condition) {
              $blocoIf(0).execute();
          } else if ($blocoIf(1) != null) {
              $blocoIf(1).execute();
          }
      }
      ('senao' blocoIf)?
    ;

blocoIf
    : '{' (cmd '.')+ '}'
      {
          // Implement execution of commands in the block
          $ctx.execute = () -> {
              for (ParserRuleContext cmdCtx : $cmd()) {
                  visit(cmdCtx);
              }
          };
      }
    ;

op_rel
    : '<'
    | '>'
    | '<='
    | '>='
    | '!='
    | '=='
    ;

expr returns [Object val, int type]
    : e=expr op=('+' | '-') t=termo
      {
          Object left = $e.val;
          Object right = $t.val;
          int leftType = $e.type;
          int rightType = $t.type;

          if (leftType == Var.NUMBER && rightType == Var.NUMBER) {
              double l = (Double) left;
              double r = (Double) right;
              if ($op.text.equals("+")) {
                  $val = l + r;
              } else {
                  $val = l - r;
              }
              $type = Var.NUMBER;
          } else if (leftType == Var.TEXT || rightType == Var.TEXT) {
              if ($op.text.equals("+")) {
                  $val = left.toString() + right.toString();
                  $type = Var.TEXT;
              } else {
                  System.err.println("Error: Invalid operation with operator " + $op.text);
                  $val = null;
                  $type = Var.TEXT;
              }
          } else {
              System.err.println("Error: Type mismatch in expression");
              $val = null;
              $type = Var.TEXT;
          }
      }
    | t=termo
      {
          $val = $t.val;
          $type = $t.type;
      }
    ;

termo returns [Object val, int type]
    : t=termo op=('*' | '/') f=fator
      {
          Object left = $t.val;
          Object right = $f.val;
          int leftType = $t.type;
          int rightType = $f.type;

          if (leftType == Var.NUMBER && rightType == Var.NUMBER) {
              double l = (Double) left;
              double r = (Double) right;
              if ($op.text.equals("*")) {
                  $val = l * r;
              } else {
                  if (r != 0) {
                      $val = l / r;
                  } else {
                      System.err.println("Error: Division by zero");
                      $val = null;
                  }
              }
              $type = Var.NUMBER;
          } else {
              System.err.println("Error: Invalid operation in term");
              $val = null;
              $type = Var.NUMBER;
          }
      }
    | f=fator
      {
          $val = $f.val;
          $type = $f.type;
      }
    ;

fator returns [Object val, int type]
    : NUM
      {
          $val = parseNumber($NUM.text);
          $type = Var.NUMBER;
      }
    | ID
      {
          Var var = symbolTable.get($ID.text);
          if (var == null) {
              System.err.println("Error: Undeclared variable " + $ID.text);
              $val = null;
              $type = Var.TEXT;
          } else {
              if (!var.isInitialized()) {
                  System.err.println("Error: Variable " + $ID.text + " has no value assigned");
                  $val = null;
                  $type = var.getType();
              } else {
                  if (var.getType() == Var.NUMBER) {
                      $val = parseNumber(var.getValue());
                      $type = Var.NUMBER;
                  } else if (var.getType() == Var.TEXT) {
                      $val = var.getValue();
                      $type = Var.TEXT;
                  }
              }
          }
      }
    | '(' expr ')'
      {
          $val = $expr.val;
          $type = $expr.type;
      }
    ;

// Lexer rules

TEXT
    : '"' (~["\r\n])* '"'
    ;

NUM
    : [0-9]+ ('.' [0-9]+)?
    ;

ID
    : [a-zA-Z] [a-zA-Z0-9]*
    ;

WS
    : [ \t\r\n]+ -> skip
    ;
