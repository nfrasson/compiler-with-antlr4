grammar FrassonGrammar;

// Regras iniciais
prog
    : 'programa' declara bloco 'fimprog'
    ;

// Declarações de variáveis
declara
    : 'declare' id (',' id)* '.'
    ;

// Bloco de comandos
bloco
    : (cmd '.')+
    ;

// Comandos
cmd
    : cmdLeitura
    | cmdEscrita
    | cmdExpr
    | cmdIf
    ;

// Comando de leitura
cmdLeitura
    : 'leia' '(' ID ')'
    ;

// Comando de escrita
cmdEscrita
    : 'escreva' '(' (texto | ID) ')'
    ;

// Comando de expressão (atribuição)
cmdExpr
    : ID ':=' expr
    ;

// Comando condicional
cmdIf
    : 'se' '(' expr op_rel expr ')' 'entao' '{' cmd+ '}' ('senao' '{' cmd+ '}')?
    ;

// Operadores relacionais
op_rel
    : '<'
    | '>'
    | '<='
    | '>='
    | '!='
    | '=='
    ;

// Expressões
expr
    : expr ('+' | '-') termo       # exprOp
    | termo                        # exprTermo
    ;

// Termos
termo
    : termo ('*' | '/') fator      # termoOp
    | fator                        # termoFator
    ;

// Fatores
fator
    : NUM                          # fatorNum
    | ID                           # fatorID
    | '(' expr ')'                 # fatorExpr
    ;

// Texto
texto
    : '"' (~["])* '"'              // Tudo exceto aspas duplas
    ;

// Identificadores e números
NUM     : [0-9]+ ;
ID      : [a-zA-Z] [a-zA-Z0-9]* ;

// Tokens ignorados
WS      : [ \t\r\n]+ -> skip ;