grammar FrassonGrammar;

@header {
    import java.util.ArrayList;
    import java.util.HashMap;
    import java.util.Map;
    import io.compiler.types.Var;
}

@members {
    private ArrayList<Var> varList = new ArrayList<>();
    private Map<String, Var> symbolTable = new HashMap<>();

    // Helper methods
    private double parseNumber(String text) {
        return Double.parseDouble(text);
    }

    private String parseString(String text) {
        return text.substring(1, text.length() - 1);
    }
}

// Rules

prog
    : 'programa' declara bloco 'fimprog' EOF
      {
          // You can add code here to execute after parsing 'prog'
      }
    ;

declara
    : 'declare' variavel (',' variavel)* '.'
      {
          // Iterate over declared variables
          for (int i = 0; i < $variavel.size(); i++) {
              String varName = $variavel.get(i).ID().getText();
              String varTypeStr = $variavel.get(i).tipo().getText();
              int varType;

              if (varTypeStr.equals("numero")) {
                  varType = Var.NUMBER;
              } else if (varTypeStr.equals("string")) {
                  varType = Var.TEXT;
              } else {
                  throw new RuntimeException("Unknown variable type: " + varTypeStr);
              }

              Var var = new Var(varName, varType);
              varList.add(var);
              symbolTable.put(varName, var);
          }
      }
    ;

variavel
    : ID ':' tipo
    ;

tipo
    : 'numero'
    | 'string'
    ;

bloco
    : (cmd '.')+
    ;

cmd
    : cmdLeitura
    | cmdEscrita
    | cmdExpr
    | cmdIf
    ;

cmdLeitura
    : 'leia' '(' ID ')'
      {
          Var var = symbolTable.get($ID.text);
          if (var == null) {
              System.err.println("Error: Undeclared variable " + $ID.text);
          } else {
              try {
                  System.out.print("Input for " + $ID.text + ": ");
                  java.util.Scanner scanner = new java.util.Scanner(System.in);
                  String input = scanner.nextLine();
                  if (var.getType() == Var.NUMBER) {
                      Double.parseDouble(input); // Validate number
                      var.setValue(input);
                  } else if (var.getType() == Var.TEXT) {
                      var.setValue(input);
                  }
              } catch (Exception e) {
                  System.err.println("Error reading input: " + e.getMessage());
              }
          }
      }
    ;

cmdEscrita
    : 'escreva' '(' (TEXT | ID) ')'
      {
          if ($TEXT != null) {
              String text = parseString($TEXT.text);
              System.out.println(text);
          } else if ($ID != null) {
              Var var = symbolTable.get($ID.text);
              if (var == null) {
                  System.err.println("Error: Undeclared variable " + $ID.text);
              } else {
                  System.out.println(var.getValue());
              }
          }
      }
    ;

cmdExpr
    : ID ':=' expr
      {
          Var var = symbolTable.get($ID.text);
          if (var == null) {
              System.err.println("Error: Undeclared variable " + $ID.text);
          } else {
              Object value = $expr.val;
              // Type checking and assignment
              if (var.getType() == Var.NUMBER && value instanceof Double) {
                  var.setValue(value.toString());
              } else if (var.getType() == Var.TEXT && value instanceof String) {
                  var.setValue((String) value);
              } else {
                  System.err.println("Error: Type mismatch in assignment to variable " + $ID.text);
              }
          }
      }
    ;

cmdIf
    : 'se' '(' expr op_rel expr ')' 'entao' blocoIf ('senao' blocoIf)?
      {
          boolean condition = false;
          Object left = $expr(0).val;
          Object right = $expr(1).val;
          String op = $op_rel.text;

          // Evaluate condition based on operator
          if (left instanceof Double && right instanceof Double) {
              double l = (Double) left;
              double r = (Double) right;
              switch (op) {
                  case "<": condition = l < r; break;
                  case ">": condition = l > r; break;
                  case "<=": condition = l <= r; break;
                  case ">=": condition = l >= r; break;
                  case "==": condition = l == r; break;
                  case "!=": condition = l != r; break;
              }
          } else {
              System.err.println("Error: Incompatible types in condition");
          }

          // Execute appropriate block
          if (condition) {
              $blocoIf(0).execute();
          } else if ($blocoIf(1) != null) {
              $blocoIf(1).execute();
          }
      }
    ;

blocoIf
    : '{' (cmd '.')+ '}'
      {
          // You may need to implement a method to execute the commands in the block
          $blocoIf.ctx.execute = () -> {
              for (ParserRuleContext cmdCtx : $cmdList) {
                  // Execute each command in the block
                  // You may need to adapt this to your implementation
                  visit(cmdCtx);
              }
          };
      }
    ;

op_rel
    : '<'
    | '>'
    | '<='
    | '>='
    | '!='
    | '=='
    ;

expr returns [Object val]
    : e=expr op=('+' | '-') t=termo
      {
          Object left = $e.val;
          Object right = $t.val;
          if (left instanceof Double && right instanceof Double) {
              double l = (Double) left;
              double r = (Double) right;
              if ($op.text.equals("+")) {
                  $val = l + r;
              } else {
                  $val = l - r;
              }
          } else if (left instanceof String || right instanceof String) {
              if ($op.text.equals("+")) {
                  $val = left.toString() + right.toString();
              } else {
                  System.err.println("Error: Invalid operation with operator " + $op.text);
                  $val = null;
              }
          } else {
              System.err.println("Error: Type mismatch in expression");
              $val = null;
          }
      }
    | t=termo
      {
          $val = $t.val;
      }
    ;

termo returns [Object val]
    : t=termo op=('*' | '/') f=fator
      {
          Object left = $t.val;
          Object right = $f.val;
          if (left instanceof Double && right instanceof Double) {
              double l = (Double) left;
              double r = (Double) right;
              if ($op.text.equals("*")) {
                  $val = l * r;
              } else {
                  if (r != 0) {
                      $val = l / r;
                  } else {
                      System.err.println("Error: Division by zero");
                      $val = null;
                  }
              }
          } else {
              System.err.println("Error: Invalid operation in term");
              $val = null;
          }
      }
    | f=fator
      {
          $val = $f.val;
      }
    ;

fator returns [Object val]
    : NUM
      {
          $val = parseNumber($NUM.text);
      }
    | ID
      {
          Var var = symbolTable.get($ID.text);
          if (var == null) {
              System.err.println("Error: Undeclared variable " + $ID.text);
              $val = null;
          } else {
              if (var.getType() == Var.NUMBER) {
                  $val = parseNumber(var.getValue());
              } else if (var.getType() == Var.TEXT) {
                  $val = var.getValue();
              }
          }
      }
    | '(' expr ')'
      {
          $val = $expr.val;
      }
    ;

// Lexer rules

TEXT
    : '"' (~["\r\n])* '"'
    ;

NUM
    : [0-9]+ ('.' [0-9]+)?
    ;

ID
    : [a-zA-Z] [a-zA-Z0-9]*
    ;

WS
    : [ \t\r\n]+ -> skip
    ;
